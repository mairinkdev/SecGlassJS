/**
 * SecGlassJS - Painel de Ferramentas de Segurança (Versão Minificada)
 * Powered by @mairinkdev
 * Uso: javascript:fetch('https://raw.githubusercontent.com/mairinkdev/SecGlassJS/main/SecGlass.min.js').then(r=>r.text()).then(eval);
 */
(() => {
    let s = { baseURL: (e = document.currentScript) ? (e = new URL(e.src)).protocol + "//" + e.host + e.pathname.substring(0, e.pathname.lastIndexOf("/") + 1) : "https://raw.githubusercontent.com/mairinkdev/SecGlassJS/main/", version: "1.0.0", debug: !0 }; var e; let r = { info: e => s.debug && console.info("[SecGlassJS] " + e), error: e => console.error("[SecGlassJS] " + e), warn: e => console.warn("[SecGlassJS] " + e) }, n = { loadedResources: [], loadCSS: o => new Promise((e, t) => { let a = document.createElement("link"); a.rel = "stylesheet", a.href = o, a.onload = () => { n.loadedResources.push(o), e(a) }, a.onerror = () => t(new Error("Falha ao carregar CSS: " + o)), document.head.appendChild(a) }), loadJS: o => new Promise((e, t) => { let a = document.createElement("script"); a.src = o, a.async = !0, a.onload = () => { n.loadedResources.push(o), e(a) }, a.onerror = () => t(new Error("Falha ao carregar JS: " + o)), document.body.appendChild(a) }), loadHTML: t => fetch(t).then(e => { if (e.ok) return e.text(); throw new Error("Erro HTTP: " + e.status) }).then(e => (n.loadedResources.push(t), e)) }, i = { isInitialized: !1, isDOMReady: !1, isPanelVisible: !1, activeToolId: null, tools: [] }; function t() {
        var e; r.info("Renderizando interface..."), (e = document.createElement("div")).id = "secglass-root", document.body.appendChild(e), e.innerHTML = `
            <div id="secglass-panel" class="hidden">
                <div id="secglass-header">
                    <h1>SecGlass<span style="font-weight:400">JS</span></h1>
                    <button id="secglass-close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="secglass-search">
                    <input type="text" placeholder="Pesquisar ferramentas (Ctrl+K)">
                </div>
                <div id="secglass-tools">
                    <!-- Ferramentas serão injetadas aqui -->
                </div>
                <div id="secglass-footer">
                    Powered by <a href="https://github.com/mairinkdev" target="_blank">@mairinkdev</a>
                </div>
            </div>
            <div id="secglass-tool-container">
                <div id="secglass-tool-header">
                    <div id="secglass-tool-title">Nome da Ferramenta</div>
                    <button id="secglass-tool-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="secglass-tool-content"></div>
            </div>
            <div class="secglass-overlay"></div>
        `, setTimeout(() => { document.getElementById("secglass-panel").classList.remove("hidden") }, 100), document.getElementById("secglass-close-btn").addEventListener("click", a), document.getElementById("secglass-tool-close").addEventListener("click", l), document.addEventListener("keydown", e => { e.ctrlKey && "k" === e.key && (e.preventDefault(), a()) }), document.querySelector(".secglass-overlay").addEventListener("click", l)
    } function a() { var e = document.getElementById("secglass-panel"); e.classList.toggle("hidden"), i.isPanelVisible = !e.classList.contains("hidden") } async function o() {
        r.info("Carregando ferramentas..."), i.tools = [{
            id: "ipinfo", name: "IP Info", description: "Consulta informações detalhadas sobre endereços IP", icon: "fa-globe", inlineScript: `
            (function (tool) {
                // Renderiza a interface básica da ferramenta
                tool.container.innerHTML = \`
                    <div style="text-align: center; padding: 20px;">
                        <h2>IP Info</h2>
                        <p>Ferramenta para consulta de informações sobre IPs</p>
                        <div style="margin: 20px 0;">
                            <input type="text" id="ipInput" placeholder="Digite um IP ou domínio"
                                style="padding: 10px; width: 70%; border-radius: 4px; border: 1px solid #ccc; margin-right: 10px;">
                            <button id="lookupBtn"
                                style="padding: 10px 15px; background: #5e35b1; color: white; border: none; border-radius: 4px; cursor: pointer;">
                                Consultar
                            </button>
                        </div>
                        <div id="ipResult" style="margin-top: 20px; text-align: left;"></div>
                    </div>
                \`;

                // Adiciona event listeners
                const ipInput = document.getElementById('ipInput');
                const lookupBtn = document.getElementById('lookupBtn');
                const ipResult = document.getElementById('ipResult');

                lookupBtn.addEventListener('click', () => {
                    const ip = ipInput.value.trim();
                    if (!ip) return;

                    ipResult.innerHTML = '<div style="text-align: center;"><i class="fas fa-spinner fa-spin"></i> Consultando...</div>';

                    // Faz a consulta usando a API ipinfo.io
                    fetch(\`https://ipinfo.io/\${ip}/json\`)
                        .then(response => response.json())
                        .then(data => {
                            let html = '<div style="background: rgba(0,0,0,0.2); padding: 15px; border-radius: 8px;">';

                            if (data.error) {
                                html = \`<div style="color: #ff6b6b; text-align: center;">
                                    <i class="fas fa-exclamation-circle"></i>
                                    <h3>Erro</h3>
                                    <p>\${data.error.title || 'Erro ao consultar IP'}</p>
                                </div>\`;
                            } else {
                                html += \`
                                    <h3>\${data.ip}</h3>
                                    <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                                        \${data.hostname ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">Hostname</td><td>\${data.hostname}</td></tr>\` : ''}
                                        \${data.city ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">Localização</td><td>\${data.city}, \${data.region}</td></tr>\` : ''}
                                        \${data.country ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">País</td><td>\${data.country}</td></tr>\` : ''}
                                        \${data.loc ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">Coordenadas</td><td>\${data.loc}</td></tr>\` : ''}
                                        \${data.org ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">Organização</td><td>\${data.org}</td></tr>\` : ''}
                                        \${data.postal ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">Código Postal</td><td>\${data.postal}</td></tr>\` : ''}
                                        \${data.timezone ? \`<tr><td style="padding: 8px 0; opacity: 0.7;">Fuso Horário</td><td>\${data.timezone}</td></tr>\` : ''}
                                    </table>
                                \`;
                            }

                            html += '</div>';
                            ipResult.innerHTML = html;
                        })
                        .catch(error => {
                            ipResult.innerHTML = \`
                                <div style="color: #ff6b6b; text-align: center; background: rgba(255,0,0,0.1); padding: 15px; border-radius: 8px;">
                                    <i class="fas fa-exclamation-circle"></i>
                                    <h3>Erro ao consultar</h3>
                                    <p>\${error.message}</p>
                                </div>
                            \`;
                        });
                });
            })
        `}]; {
            let a = document.getElementById("secglass-tools"); i.tools.forEach(e => {
                var t = document.createElement("button"); t.className = "secglass-tool-button", t.dataset.toolId = e.id, t.innerHTML = `
                <i class="fas ${e.icon}"></i>
                <div>
                    <span class="tool-name">${e.name}</span>
                    <small class="tool-desc">${e.description}</small>
                </div>
            `, t.addEventListener("click", () => {
                    {
                        var o = e; i.activeToolId = o.id, document.getElementById("secglass-tool-title").textContent = o.name; let a = document.getElementById("secglass-tool-content"); a.innerHTML = `
            <div class="tool-loading">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Carregando ${o.name}...</p>
            </div>
        `, document.getElementById("secglass-tool-container").style.display = "flex", document.querySelector(".secglass-overlay").style.display = "block"; try {
                            o.inlineScript ? setTimeout(() => { var e = { container: a, name: o.name, id: o.id }, t = new Function("tool", o.inlineScript); a.innerHTML = "", t(e) }, 300) : fetch(`${s.baseURL}tools/${o.id}.js`).then(e => { if (e.ok) return e.text(); throw new Error("Erro ao carregar ferramenta: " + e.status) }).then(e => { var t = { container: a, name: o.name, id: o.id }, e = new Function("tool", e); a.innerHTML = "", e(t) }).catch(e => {
                                a.innerHTML = `
                            <div class="error-message">
                                <i class="fas fa-exclamation-triangle"></i>
                                <h3>Erro ao carregar ferramenta</h3>
                                <p>${e.message}</p>
                            </div>
                        `, r.error(`Falha ao carregar ferramenta ${o.id}: ` + e.message)
                            })
                        } catch (e) {
                            a.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Erro ao executar ferramenta</h3>
                    <p>${e.message}</p>
                </div>
            `, r.error(`Erro ao executar ferramenta ${o.id}: ` + e.message)
                        }
                    }
                }), a.appendChild(t)
            })
        } r.info("Ferramentas carregadas")
    } function l() { document.getElementById("secglass-tool-container").style.display = "none", document.querySelector(".secglass-overlay").style.display = "none", i.activeToolId = null } async function d() {
        if (!i.isInitialized) try {
            r.info("Inicializando SecGlassJS..."), r.info("URL base: " + s.baseURL), r.info("Carregando recursos visuais..."); try { await n.loadCSS("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"), r.info("Font Awesome carregado com sucesso") } catch (e) { r.error("Erro ao carregar Font Awesome: " + e.message) } r.info("Carregando CSS embutido..."); var e = document.createElement("style"); e.id = "secglass-styles", e.textContent = `
            #secglass-root * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            }

            #secglass-panel {
                position: fixed;
                top: 20px;
                right: 20px;
                width: 350px;
                height: 500px;
                background: rgba(30, 30, 30, 0.85);
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.1);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                color: #e0e0e0;
                z-index: 999999;
                overflow: hidden;
                display: flex;
                flex-direction: column;
                transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            }

            #secglass-panel.hidden {
                transform: translateX(110%);
                opacity: 0;
            }

            #secglass-header {
                padding: 15px;
                background: rgba(0, 0, 0, 0.2);
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

            #secglass-header h1 {
                font-size: 1.2rem;
                font-weight: 600;
                margin: 0;
                background: linear-gradient(90deg, #5e35b1, #42a5f5);
                -webkit-background-clip: text;
                background-clip: text;
                -webkit-text-fill-color: transparent;
            }

            #secglass-close-btn {
                background: rgba(255, 255, 255, 0.1);
                border: none;
                color: #e0e0e0;
                width: 30px;
                height: 30px;
                border-radius: 15px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s;
            }

            #secglass-close-btn:hover {
                background: rgba(255, 255, 255, 0.2);
            }

            #secglass-search {
                padding: 15px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            #secglass-search input {
                width: 100%;
                background: rgba(255, 255, 255, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 10px 15px;
                color: #e0e0e0;
                font-size: 0.9rem;
                outline: none;
                transition: all 0.2s;
            }

            #secglass-search input:focus {
                border-color: rgba(255, 255, 255, 0.2);
                box-shadow: 0 0 0 2px rgba(124, 77, 255, 0.2);
            }

            #secglass-tools {
                flex: 1;
                overflow-y: auto;
                padding: 10px;
            }

            #secglass-tools::-webkit-scrollbar {
                width: 6px;
            }

            #secglass-tools::-webkit-scrollbar-track {
                background: transparent;
            }

            #secglass-tools::-webkit-scrollbar-thumb {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 3px;
            }

            .secglass-tool-button {
                display: flex;
                align-items: center;
                gap: 10px;
                padding: 10px;
                background: rgba(255, 255, 255, 0.05);
                border: none;
                border-radius: 10px;
                color: #e0e0e0;
                cursor: pointer;
                width: 100%;
                text-align: left;
                margin-bottom: 8px;
                transition: all 0.2s;
            }

            .secglass-tool-button:hover {
                background: rgba(255, 255, 255, 0.1);
                transform: translateY(-2px);
            }

            .secglass-tool-button i {
                color: #42a5f5;
                font-size: 1rem;
                width: 20px;
                text-align: center;
            }

            .secglass-tool-button .tool-name {
                font-weight: 500;
                display: block;
                margin-bottom: 3px;
            }

            .secglass-tool-button .tool-desc {
                font-size: 0.8rem;
                opacity: 0.7;
            }

            #secglass-footer {
                padding: 10px;
                font-size: 0.8rem;
                opacity: 0.7;
                text-align: center;
                background: rgba(0, 0, 0, 0.2);
            }

            #secglass-tool-container {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 80%;
                max-width: 800px;
                height: 70vh;
                background: rgba(40, 40, 40, 0.9);
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.1);
                box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
                z-index: 999998;
                display: none;
                flex-direction: column;
                overflow: hidden;
            }

            #secglass-tool-header {
                padding: 15px;
                background: rgba(0, 0, 0, 0.3);
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

            #secglass-tool-title {
                font-size: 1.2rem;
                font-weight: 500;
            }

            #secglass-tool-close {
                background: rgba(255, 255, 255, 0.1);
                border: none;
                color: #e0e0e0;
                width: 30px;
                height: 30px;
                border-radius: 15px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s;
            }

            #secglass-tool-close:hover {
                background: rgba(255, 255, 255, 0.2);
            }

            #secglass-tool-content {
                flex: 1;
                padding: 20px;
                overflow-y: auto;
            }

            .secglass-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                backdrop-filter: blur(3px);
                -webkit-backdrop-filter: blur(3px);
                z-index: 999997;
                display: none;
            }

            /* Estilos adicionados da main.css */
            .tool-loading {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                text-align: center;
                height: 100%;
                padding: 40px;
            }

            .tool-loading i {
                font-size: 2rem;
                margin-bottom: 15px;
                color: #42a5f5;
                animation: spin 1.5s linear infinite;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            .error-message {
                background: rgba(255, 0, 0, 0.1);
                border-radius: 10px;
                padding: 20px;
                text-align: center;
                display: flex;
                flex-direction: column;
                align-items: center;
            }

            .error-message i {
                color: #ff6b6b;
                font-size: 2rem;
                margin-bottom: 15px;
            }

            .error-message h3 {
                margin-bottom: 10px;
                color: #ff6b6b;
            }
        `, document.head.appendChild(e), r.info("CSS embutido aplicado com sucesso"), await 0, t(), await o(), i.isInitialized = !0, r.info("SecGlassJS inicializado com sucesso")
        } catch (e) { r.error("Falha na inicialização: " + e.message), console.error(e) }
    } "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", d) : d(), window.SecGlassJS = { toggle: a, version: s.version }, window.SecGlassUtils = {
        showToast: function (e, t = "info") {
            let a = document.createElement("div"); return a.style.position = "fixed", a.style.bottom = "20px", a.style.right = "20px", a.style.background = "rgba(30, 30, 30, 0.9)", a.style.color = "white", a.style.padding = "15px", a.style.borderRadius = "10px", a.style.zIndex = "9999999", a.style.boxShadow = "0 5px 15px rgba(0, 0, 0, 0.3)", a.style.backdropFilter = "blur(10px)", a.style.minWidth = "250px", a.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="fas ${"error" === t ? "fa-exclamation-circle" : "fa-check-circle"}" style="color: ${"error" === t ? "#ff5252" : "success" === t ? "#66bb6a" : "#42a5f5"}"></i>
                    <span>${e}</span>
                </div>
            `, document.body.appendChild(a), setTimeout(() => { a.style.opacity = "0", a.style.transition = "opacity 0.3s ease-out", setTimeout(() => a.remove(), 300) }, 3e3), a
        }, copyToClipboard: function (e) { return navigator.clipboard.writeText(e).then(() => (this.showToast("Copiado para a área de transferência!", "success"), !0)).catch(e => { throw this.showToast("Erro ao copiar texto", "error"), console.error("Erro ao copiar:", e), e }) }
    }
})();
